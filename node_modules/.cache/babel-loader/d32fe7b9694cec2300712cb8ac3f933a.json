{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = `${_supabaseUrl}/rest/v1`;\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n    this.schema = settings.schema;\n    this.multiTab = settings.multiTab;\n    this.fetch = settings.fetch;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n\n    this._listenForAuthEvents();\n\n    this._listenForMultiTabEvents(); // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.restUrl}/${table}`;\n    return new SupabaseQueryBuilder(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn, params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    const rest = this._initPostgRESTClient();\n\n    return rest.rpc(fn, params, {\n      head,\n      count\n    });\n  }\n  /**\n   * Remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const subs = this.realtime.channels.slice();\n      const removeSubPromises = subs.map(sub => this.removeSubscription(sub).then(() => ({\n        status: 'fulfilled',\n        value: {\n          error: null\n        }\n      })).catch(reason => ({\n        status: 'rejected',\n        reason\n      })));\n      return Promise.all(removeSubPromises);\n    });\n  }\n  /**\n   * Removes an active subscription and returns the number of open connections.\n   *\n   * @param subscription The subscription you want to remove.\n   */\n\n\n  removeSubscription(subscription) {\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      const {\n        error\n      } = yield this._closeSubscription(subscription);\n\n      if (error) {\n        return reject({\n          error\n        });\n      }\n\n      const allSubscriptions = this.getSubscriptions();\n\n      if (allSubscriptions.length === 0) {\n        const {\n          error\n        } = yield this.realtime.disconnect();\n\n        if (error) {\n          return reject({\n            error\n          });\n        }\n      }\n\n      const openSubscriptionsCount = allSubscriptions.filter(chan => chan.isJoined()).length;\n      return resolve({\n        data: {\n          openSubscriptions: openSubscriptionsCount\n        },\n        error: null\n      });\n    }));\n  }\n\n  _closeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!subscription.isClosed()) {\n        return yield this._closeChannel(subscription);\n      }\n\n      return new Promise(resolve => {\n        this.realtime.remove(subscription);\n        return resolve({\n          error: null\n        });\n      });\n    });\n  }\n  /**\n   * Returns an array of all your subscriptions.\n   */\n\n\n  getSubscriptions() {\n    return this.realtime.channels;\n  }\n\n  _initSupabaseAuthClient(_ref) {\n    let {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      headers,\n      fetch\n    } = _ref;\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, headers), authHeaders),\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n        apikey: this.supabaseKey\n      })\n    }));\n  }\n\n  _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch\n    });\n  }\n\n  _getAuthHeaders() {\n    var _a, _b;\n\n    const headers = this.headers;\n    const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n    headers['apikey'] = this.supabaseKey;\n    headers['Authorization'] = `Bearer ${authBearer}`;\n    return headers;\n  }\n\n  _closeChannel(subscription) {\n    return new Promise((resolve, reject) => {\n      subscription.unsubscribe().receive('ok', () => resolve({\n        error: null\n      })).receive('error', error => reject({\n        error\n      })).receive('timeout', () => reject({\n        error: 'timed out'\n      }));\n    });\n  }\n\n  _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return null;\n    }\n\n    try {\n      return window === null || window === void 0 ? void 0 : window.addEventListener('storage', e => {\n        var _a, _b, _c;\n\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue));\n          const accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n          const previousAccessToken = (_c = this.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n          }\n        }\n      });\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error);\n      return null;\n    }\n  }\n\n  _listenForAuthEvents() {\n    let {\n      data\n    } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, token, source) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token); // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n\n      if (source == 'STORAGE') this.auth.setAuth(token);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.removeAllSubscriptions();\n      if (source == 'STORAGE') this.auth.signOut();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/rishabhsharma/Desktop/builds/discord/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants'\nimport { stripTrailingSlash, isBrowser } from './lib/helpers'\nimport { Fetch, GenericObject, SupabaseClientOptions } from './lib/types'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder'\nimport { SupabaseStorageClient } from '@supabase/storage-js'\nimport { PostgrestClient } from '@supabase/postgrest-js'\nimport { AuthChangeEvent, Session, Subscription } from '@supabase/gotrue-js'\nimport { RealtimeClient, RealtimeSubscription, RealtimeClientOptions } from '@supabase/realtime-js'\n\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n\n  protected schema: string\n  protected restUrl: string\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected realtime: RealtimeClient\n  protected multiTab: boolean\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n\n    this.restUrl = `${_supabaseUrl}/rest/v1`\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.schema = settings.schema\n    this.multiTab = settings.multiTab\n    this.fetch = settings.fetch\n    this.headers = { ...DEFAULT_HEADERS, ...options?.headers }\n\n    this.auth = this._initSupabaseAuthClient(settings)\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n\n    this._listenForAuthEvents()\n    this._listenForMultiTabEvents()\n\n    // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch)\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n  from<T = any>(table: string): SupabaseQueryBuilder<T> {\n    const url = `${this.restUrl}/${table}`\n    return new SupabaseQueryBuilder<T>(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: { head?: boolean; count?: null | 'exact' | 'planned' | 'estimated' } = {}\n  ) {\n    const rest = this._initPostgRESTClient()\n    return rest.rpc<T>(fn, params, { head, count })\n  }\n\n  /**\n   * Remove all subscriptions.\n   */\n  async removeAllSubscriptions(): Promise<\n    (\n      | {\n          status: 'fulfilled'\n          value: {\n            error: null\n          }\n        }\n      | { status: 'rejected'; reason: { error: Error } }\n    )[]\n  > {\n    const subs: RealtimeSubscription[] = this.realtime.channels.slice()\n    const removeSubPromises = subs.map((sub: RealtimeSubscription) =>\n      this.removeSubscription(sub)\n        .then((): { status: 'fulfilled'; value: { error: null } } => ({\n          status: 'fulfilled',\n          value: { error: null },\n        }))\n        .catch((reason: { error: Error }): { status: 'rejected'; reason: { error: Error } } => ({\n          status: 'rejected',\n          reason,\n        }))\n    )\n    return Promise.all(removeSubPromises)\n  }\n\n  /**\n   * Removes an active subscription and returns the number of open connections.\n   *\n   * @param subscription The subscription you want to remove.\n   */\n  removeSubscription(subscription: RealtimeSubscription): Promise<\n    | {\n        data: { openSubscriptions: number }\n        error: null\n      }\n    | { error: Error }\n  > {\n    return new Promise(async (resolve, reject) => {\n      const { error } = await this._closeSubscription(subscription)\n\n      if (error) {\n        return reject({ error })\n      }\n\n      const allSubscriptions = this.getSubscriptions()\n\n      if (allSubscriptions.length === 0) {\n        const { error } = await this.realtime.disconnect()\n\n        if (error) {\n          return reject({ error })\n        }\n      }\n\n      const openSubscriptionsCount = allSubscriptions.filter((chan) => chan.isJoined()).length\n\n      return resolve({\n        data: { openSubscriptions: openSubscriptionsCount },\n        error: null,\n      })\n    })\n  }\n\n  private async _closeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: null | Error }> {\n    if (!subscription.isClosed()) {\n      return await this._closeChannel(subscription)\n    }\n\n    return new Promise((resolve) => {\n      this.realtime.remove(subscription)\n      return resolve({ error: null })\n    })\n  }\n\n  /**\n   * Returns an array of all your subscriptions.\n   */\n  getSubscriptions(): RealtimeSubscription[] {\n    return this.realtime.channels\n  }\n\n  private _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n  }: SupabaseClientOptions) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...headers, ...authHeaders },\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options?: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...options?.params, apikey: this.supabaseKey },\n    })\n  }\n\n  private _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  private _getAuthHeaders(): GenericObject {\n    const headers: GenericObject = this.headers\n    const authBearer = this.auth.session()?.access_token ?? this.supabaseKey\n    headers['apikey'] = this.supabaseKey\n    headers['Authorization'] = `Bearer ${authBearer}`\n    return headers\n  }\n\n  private _closeChannel(subscription: RealtimeSubscription): Promise<{ error: null | Error }> {\n    return new Promise((resolve, reject) => {\n      subscription\n        .unsubscribe()\n        .receive('ok', () => resolve({ error: null }))\n        .receive('error', (error: Error) => reject({ error }))\n        .receive('timeout', () => reject({ error: 'timed out' }))\n    })\n  }\n\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return null\n    }\n\n    try {\n      return window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          const accessToken: string | undefined =\n            newSession?.currentSession?.access_token ?? undefined\n          const previousAccessToken = this.auth.session()?.access_token\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE')\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE')\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n      return null\n    }\n  }\n\n  private _listenForAuthEvents() {\n    let { data } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token!)\n      // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n      if (source == 'STORAGE') this.auth.setAuth(token!)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.removeAllSubscriptions()\n      if (source == 'STORAGE') this.auth.signOut()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}