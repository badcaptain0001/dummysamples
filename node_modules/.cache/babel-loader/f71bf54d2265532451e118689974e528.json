{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhsharma/Desktop/builds/discord/src/Account.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Account(_ref) {\n  _s();\n\n  let {\n    session\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [username, setUsername] = useState('');\n  const [website, setWebsite] = useState('');\n  const [avatar_url, setAvatarUrl] = useState('');\n  useEffect(() => {\n    getProfile();\n  }, [session]);\n\n  async function getProfile() {\n    try {\n      setLoading(true);\n      const user = supabase.auth.user();\n      let {\n        data,\n        error,\n        status\n      } = await supabase.from('profiles').select(`username, website, avatar_url`).eq('id', user.id).single();\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      if (data) {\n        setUsername(data.username);\n        setWebsite(data.website);\n        setAvatarUrl(data.avatar_url);\n      }\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function updateProfile(_ref2) {\n    let {\n      username,\n      website,\n      avatar_url\n    } = _ref2;\n\n    try {\n      setLoading(true);\n      const user = supabase.auth.user();\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date()\n      };\n      let {\n        error\n      } = await supabase.from('profiles').upsert(updates, {\n        returning: 'minimal' // Don't return the value after inserting\n\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-widget\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"text\",\n        value: session.user.email,\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username || '',\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"website\",\n        children: \"Website\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"website\",\n        type: \"website\",\n        value: website || '',\n        onChange: e => setWebsite(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button block primary\",\n        onClick: () => updateProfile({\n          username,\n          website,\n          avatar_url\n        }),\n        disabled: loading,\n        children: loading ? 'Loading ...' : 'Update'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button block\",\n        onClick: () => supabase.auth.signOut(),\n        children: \"Sign Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Account, \"lJG9PVFmG0xTVCGzhoHonKOKZ5Q=\");\n\n_c = Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/rishabhsharma/Desktop/builds/discord/src/Account.js"],"names":["useState","useEffect","supabase","Account","session","loading","setLoading","username","setUsername","website","setWebsite","avatar_url","setAvatarUrl","getProfile","user","auth","data","error","status","from","select","eq","id","single","alert","message","updateProfile","updates","updated_at","Date","upsert","returning","email","e","target","value","signOut"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { supabase } from './supabaseClient'\n\nexport default function Account({ session }) {\n  const [loading, setLoading] = useState(false)\n  const [username, setUsername] = useState('')\n  const [website, setWebsite] = useState('')\n  const [avatar_url, setAvatarUrl] = useState('')\n\n  useEffect(() => {\n    getProfile()\n  }, [session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      let { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({ username, website, avatar_url }) {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date(),\n      }\n\n      let { error } = await supabase.from('profiles').upsert(updates, {\n        returning: 'minimal', // Don't return the value after inserting\n      })\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"form-widget\">\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" type=\"text\" value={session.user.email} disabled />\n      </div>\n      <div>\n        <label htmlFor=\"username\">Name</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username || ''}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"website\">Website</label>\n        <input\n          id=\"website\"\n          type=\"website\"\n          value={website || ''}\n          onChange={(e) => setWebsite(e.target.value)}\n        />\n      </div>\n\n      <div>\n        <button\n          className=\"button block primary\"\n          onClick={() => updateProfile({ username, website, avatar_url })}\n          disabled={loading}\n        >\n          {loading ? 'Loading ...' : 'Update'}\n        </button>\n      </div>\n\n      <div>\n        <button className=\"button block\" onClick={() => supabase.auth.signOut()}>\n          Sign Out\n        </button>\n      </div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}